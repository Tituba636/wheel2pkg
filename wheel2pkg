#!/usr/bin/python3

import os

Global_Python2Version = "2.7"
Global_Python3Version = "3.4"

Global_PythonVersion = {
	"python2" : "2.7",
	"python3" : "3.4",
}
Global_PkgPrefix = {
	"source"  : "python",
	"python2" : "python",
	"python3" : "python3",
}

# Set this if you want all your OBS package directories
# in /work/ibs/wheels or something
Global_SrcPkgRoot = None

Global_BuildRoot = "/var/tmp/build-$USER"
Global_InstallRoot = "/usr"

opt_verbose = 0

def usage():
	print("wheel2pkg [options] name [...]")
	print("  options can be one of")
	print("    -h, --help   Display this message")


def abort(exitCode = 2):
	import sys

	print ("Aborting package conversion")
	sys.exit(exitCode)

def log_fatal(msg):
	print ("Error: " + msg)
	abort()

def log_error(msg):
	print ("Error: " + msg)

def log_warning(msg):
	print ("Warning: " + msg)

def log_info(msg):
	print ("== " + msg)

def log_verbose(msg):
	global opt_verbose

	if opt_verbose:
		log_info(msg)

def log_debug(msg):
	global opt_verbose

	if opt_verbose > 1:
		log_info(msg)

def shellExpansion(value):

	if "$" not in value:
		return value

	result = ""
	while True:
		i = value.find("$")
		if i < 0:
			break

		result += value[:i]
		value = value[i+1:]

		if value[0] == "$":
			result += "$"
			value = value[1:]
			continue

		varlen = 0
		for j in range(len(value)):
			if not value[j].isalpha():
				break
			varlen = j + 1

		varname = value[:varlen]
		value = value[varlen:]

		expansion = os.getenv(varname)

		if expansion is not None:
			result += expansion

	return result + value

def runShellCommand(cmd):
	import os

	log_info("Executing shell command <<%s>>" % cmd)
	rv = os.system(cmd)
	if rv != 0:
		log_error("Shell command returned exit status %d - failed" % rv)
		abort()

def runShellCommandList(cmdList):
	return runShellCommand("; ".join(cmdList))

def findFiles(basename, suffix = None, caseSensitive = True):
	import os

	result = []
	for d in os.listdir("."):
		if d.startswith(basename) and \
		   (suffix is None or d.endswith(suffix)):
			result.append(d)
		elif not caseSensitive:
			if d.lower().startswith(basename) and \
			   (suffix is None or d.endswith(suffix)):
				result.append(d)
	
	return result

def searchPath(filename, pathList):
	import os

	for dir in pathList:
		if not dir or dir == ".":
			path = filename
		else:
			path = shellExpansion(dir) + "/" + filename

		if os.path.exists(path):
			return path

	return None

def ignoreFilesMatching(fileList, testFunc):
	i = 0
	while i < len(fileList):
		if testFunc(fileList[i]):
			log_info("Ignoring file \"%s\"" % fileList[i])
			del fileList[i]
		else:
		 	i += 1

def ignoreFilesWithSuffix(fileList, suffix):
	ignoreFilesMatching(fileList, lambda name : name.endswith(suffix))

def writeFileList(path, fileList, makeRelative = False):
	f = open(path, 'w')
	for name in fileList:
		if not name.endswith("/"):
			if makeRelative and name.startswith("/"):
				f.write(".%s\n" % name)
			else:
				f.write("%s\n" % name)
	f.close()

def removeFile(path):
	import os

	os.remove(path)

def wheelReadFile(archive, filename):
	try:
		import zipfile
		zf = zipfile.ZipFile(archive)

		zf.testzip()
	except err:
		log_fatal("Unable to open wheel archive %s: %s" % (archive, err))

	searchName = "/" + filename
	foundPath = None
	for name in zf.namelist():
		if name.endswith(searchName):
			foundPath = name
			break

	if foundPath is None:
		log_fatal("Unable to locate %s file in %s" % (filename, archive))

	try:
		log_info("Reading file %s (from %s)" % (foundPath, archive))
		raw = zf.read(foundPath)
	except err:
		log_fatal("Unable to extract %s from wheel archive %s: %s" % (foundPath, archive, err))

	return (foundPath, raw)


def tarballReadFile(archive, filename):
	try:
		import tarfile

		tf = tarfile.open(archive)
	except Exception as err:
		log_fatal("Unable to open tar archive %s: %s" % (archive, err))

	searchName = "/" + filename
	foundPath = None
	for name in tf.getnames():
		if name.endswith(searchName):
			foundPath = name
			break

	if foundPath is None:
		log_fatal("Unable to locate %s file in %s" % (filename, archive))

	try:
		log_info("Reading file %s (from %s)" % (foundPath, archive))
		raw = tf.extractfile(foundPath)
	except Exception as err:
		log_fatal("Unable to extract %s from wheel archive %s: %s" % (foundPath, archive, err))

	if raw is None:
		log_fatal("Unable to extract %s from wheel archive %s: no data?" % (foundPath, archive))

	return (foundPath, raw)


def lstripAndChop(s, chars):
	pfxLen = 0
	for i in range(len(s)):
		if s[i] not in chars:
			break
		pfxLen = i + 1

	prefix = s[:pfxLen]
	rest = s[pfxLen:].strip()

	return (prefix, rest)

# Full syntax of requirements is specified in PEP508
def parseVersionSpec(req, name, versionSpec):
	log_verbose("  %s|%s" % (name, versionSpec))

	if versionSpec.find(",") >= 0:
		result = []
		for part in versionSpec.split(","):
			result.append(parseVersionSpec(req, name, part))

		return ", ".join(result)

	rpmVersionOperators = {
		"==" : "=",
		"<=" : "<=",
		">=" : ">=",
		"<"  : "<",
		">"  : ">",
		"~=" : "=",	# fudge it
		"===" : "=",	# fudge it
	}

	(op, version) = lstripAndChop(versionSpec, "<>=~")

	rpmOp = rpmVersionOperators.get(op)
	if rpmOp is not None:
		version = version.strip()
		# We do not prefix with python- or python3- here, as we do not
		# know the context yet. This needs to happen later
		return "%s %s %s" % (name, rpmOp, version)

	log_fatal("Unable to handle requirement %s %s" % (req, versionSpec))

def parseRequirement(req):
	import re

	log_verbose("parsing requirement \"%s\"" % req)
	comment = ""

	# environment markers
	if ";" in req:
		(req, envReq) = req.split(";", 1)

		envReq = envReq.strip()

		(ident, rest) = lstripAndChop(envReq, "abcdefghijklmnopqrstuvwxyz")
		rest = rest.strip()

		if ident == "extra" and rest.startswith("=="):
			log_info("Ignorning requirement \"%s\" due to env marker \"%s\"" % (req, envReq))
			return

		# For now, we just leave the env marker in a comment
		# requiring manual cleanup
		comment = " # " + envReq

	req = req.strip()

	m = re.search("\((.*)\)$", req)
	if m is not None:
		name = req[:m.start(0)].strip()
		versionSpec = m.group(1)

		return parseVersionSpec(req, name, versionSpec) + comment

	return req + comment

PythonPkg_simpleAttrs = ("name", "version", "license", "summary", "home-page", "author", "author-email", "platform")
PythonPkg_listAttrs = ("python-versions", "requires")

def newMetadata():
	global PythonPkg_simpleAttrs, PythonPkg_listAttrs

	meta = dict()
	for a in PythonPkg_simpleAttrs:
		meta[a] = None
	for a in PythonPkg_listAttrs:
		meta[a] = []

	return meta

def processPythonPackageAttr(result, kwd, value):
	global PythonPkg_simpleAttrs, PythonPkg_listAttrs

	if kwd == "license" and value.lower() == "unknown":
		return

	if kwd in PythonPkg_simpleAttrs:
		result[kwd] = value
		return

	if kwd == "requires-dist":
		info = parseRequirement(value)
		if info is not None:
			result['requires'].append(info)
		return

	if kwd == "classifier":
		info = value.replace(" ", "")
		if info == "ProgrammingLanguage::Python":
			# ignore
			return

		if info.startswith("ProgrammingLanguage::Python::"):
			info = info.replace("ProgrammingLanguage::Python::", "", 1)
			if info[0].isdigit():
				global Global_Python2Version, Global_Python3Version

				# This is either "$MAJOR" or "$MAJOR.$MINOR"
				pyvers = None
				if info == "2" or info == Global_Python2Version:
					pyvers = "python2"
				elif info == "3" or info == Global_Python3Version:
					pyvers = "python3"

				if pyvers and pyvers not in result['python-versions']:
					result['python-versions'].append(pyvers)
			return

		if info.startswith("License::OSIApproved::") and \
		   result['license'] is None:
			info = info.replace("License::OSIApproved::", "", 1)
			result['license'] = info
			return

		# We don't care about these; but we also don't want to clutter
		# our output
		if info.startswith("Impl") or \
		   info.startswith("NaturalLanguage") or \
		   info.startswith("DevelopmentStatus") or \
		   info.startswith("Environment") or \
		   info.startswith("IntendedAudience"):
			# ignore
			return

		log_verbose("  ignoring classifier=%s" % value)
		return

	if kwd == 'requires-python':
		log_verbose("We should really handle this requires-python info")

	log_verbose("  ignoring %s=%s" % (kwd, value))

def parseWheelMetadata(archive, path, raw):
	global PythonPkg_simpleAttrs, PythonPkg_listAttrs

	result = newMetadata()

	log_info("Parsing %s" % (path))
	for line in raw.decode().splitlines():
		if not line or not line[0].isalpha():
			break

		(kwd, value) = line.split(':', 1)

		kwd = kwd.lower()
		value = value.strip()

		if kwd == "metadata-version":
			if value not in ('2.0', '2.1'):
				log_warning("%s: unexpected metadata version %s" % (archive, value))
			continue

		processPythonPackageAttr(result, kwd, value)

	return result

class Tokenizer:
	EOF = None
	PUNCT = 1
	STRING = 2
	IDENTIFIER = 3
	NUMBER = 4
	OTHER = 42

	def __init__(self, str, file = None, filename = None, lineno = 1):
		self.__stashed = ()

		self.__s = str
		self.__f = file
		self.__i = 0
		self.__c = None
		self.filename = filename
		self.line = lineno

	def error(self, msg):
		if self.filename:
			msg = "%s(%d): %s" % (self.filename, self.line, msg)
		raise ValueError(msg)

	def warning(self, msg):
		if self.filename:
			msg = "%s(%d): %s" % (self.filename, self.line, msg)
		log_warning(msg)

	def unget(self, token, value):
		if self.__stashed:
			log_fatal("Tokeninzer.unget() called twice in a row")
		self.__stashed = (token, value)

	def next(self, eofAllowed = False):
		(token, value) = self.__next()

		log_debug("  (%s, %s)" % (token, value))
		if token is None and not eofAllowed:
			self.error("unexpected End of File")

		return (token, value)

	def peek(self):
		if not self.__stashed:
			(t, v) = self.next(eofAllowed = True)
			if t is None:
				return (t, v)
			self.__stashed = (t, v)
		return self.__stashed

	def lookahead(self, expectToken, expectValue):
		(token, value) = self.peek()
		if token is None:
			return False

		if token != expectToken:
			return False

		if expectValue and value != expectValue:
			return False

		return True

	def __next(self):
		if self.__stashed:
			rv = self.__stashed
			self.__stashed = ()
			return rv

		while True:
			c = self.__getc()
			if c is None:
				return (None, None)
			if not c.isspace():
				break

		if c in "()[]{},=:;/*+-$%":
			return (Tokenizer.PUNCT, c)

		if c == "'" or c == '"':
			return (Tokenizer.STRING, self.__stringLiteral(c))

		if c.isdigit():
			number = c
			while True:
				c = self.__getc()
				if c is None:
					break

				if not c.isdigit() and c != ".":
					self.__ungetc(c)
					break

				number += c

			return (Tokenizer.NUMBER, number)

		if c.isalpha():
			ident = c
			while True:
				c = self.__getc()
				if c is None:
					break

				if not c.isalnum() and c != "_" and c != ".":
					self.__ungetc(c)
					break

				ident += c

			return (Tokenizer.IDENTIFIER, ident)

		return (Tokenizer.OTHER, c)

	def __stringLiteral(self, end):
		result = ""
		while True:
			c = self.__getc()
			if c == '\\':
				c = self.__getc()
				if c is None:
					log_fatal("new line in the middle of a string")
				result += c
				continue

			if c == end:
				break

			result += c

		return result

	def __ungetc(self, c):
		if self.__c is not None:
			log_fatal("Tokeninzer cannot look ahead more than one")

		self.__c = c

	def __getc(self):
		c = self.__c
		if c is not None:
			self.__c = None
			return c

		while True:
			s = self.__s
			i = self.__i

			if s is None:
				return None

			if i < len(s):
				break

			self.__gets()
			# print("new line: %s" % self.__s)

		# print("s[%d] = %s" % (i, s[i]))
		self.__i += 1
		return s[i]

	def __gets(self):
		self.__s = None
		self.__i = 0

		f = self.__f
		if f is not None:
			while self.__s is None:
				s = f.readline()
				if not s:
					self.__f = None
					return

				self.__s = s.decode().rstrip("\n")
				self.line += 1
				break

def parseTuple(tokenizer, end):
	result = []

	token = None
	while True:
		(token, value) = tokenizer.next()
		if token == Tokenizer.PUNCT and value == end:
			return result

		tokenizer.unget(token, value)
		item = parseExpression(tokenizer)
		result.append(item)

		(token, value) = tokenizer.next()
		if token == Tokenizer.PUNCT and value == ',':
			continue
		tokenizer.unget(token, value)

def parseDict(tokenizer, end):
	result = {}

	token = None
	while True:
		(token, value) = tokenizer.next()
		if token == Tokenizer.PUNCT and value == end:
			return result

		if token != Tokenizer.STRING:
			tokenizer.error("items in a dict must start with 'string'")
		key = value

		(token, value) = tokenizer.next()
		if token != Tokenizer.PUNCT or value != ':':
			tokenizer.error("items in a dict must start with 'string' : ")

		value = parseExpression(tokenizer)
		result[key] = value

		(token, value) = tokenizer.next()
		if token == Tokenizer.PUNCT and value == ',':
			continue
		tokenizer.unget(token, value)

def parseLiteral(tokenizer, globalVariableDict = None):
	(token, value) = tokenizer.next()
	if token == Tokenizer.STRING:
		return value

	if token == Tokenizer.IDENTIFIER:
		identifier = value

		if tokenizer.lookahead(Tokenizer.PUNCT, '('):
			tokenizer.next() # consume
			# debug0("handling function call")
			parseArgumentList(tokenizer, globalVariableDict, indent = "    ")
			return "unknown"

		value = None
		if globalVariableDict:
			value = globalVariableDict.get(identifier)
		if value is None:
			value = "unknown"

		return value

	if token == Tokenizer.NUMBER:
		return value

	if token == Tokenizer.PUNCT and value == '[':
		return parseTuple(tokenizer, ']')
	if token == Tokenizer.PUNCT and value == '(':
		return parseTuple(tokenizer, ')')
	if token == Tokenizer.PUNCT and value == '{':
		return parseDict(tokenizer, '}')

	tokenizer.error("Unable to handle literal starting with %s" % value)

def parseExpression(tokenizer, globalVariableDict = None):
	# print("parseExpression: parse left literal")
	literal = parseLiteral(tokenizer, globalVariableDict)
	# print("parseExpression: parsed %s" % literal)

	while True:
		(token, value) = tokenizer.peek()
	# print("parseExpression: next is (%s, %s)" % (token, value))

		# Do we have an infix operator?
		if token != Tokenizer.PUNCT or value not in "%+-*/":
			break

		tokenizer.next() # consume operator
		# print("Expression: parse right hand side")
		parseExpression(tokenizer)

		# Anything more complex than a literal always
		# returns None
		literal = None

	# print("parseExpression: return %s" % literal)
	return literal

def parseArgumentList(tokenizer, globalVariableDict = None, indent = "  "):
	def debug0(msg):
		log_verbose(indent + msg)

	def debug1(msg):
		log_debug(indent + msg)

	positionalArgs = []
	namedArgs = {}

	paramIndex = 0
	while True:
		debug0("Next argument")

		(token, value) = tokenizer.next()

		if token == Tokenizer.PUNCT and value == ')':
			# we've made it!
			debug0("Parsed last argument")
			return (positionalArgs, namedArgs)

		paramIndex += 1
		if token == Tokenizer.STRING:
			tokenizer.warning("unnamed positional parameter at position %d; ignored" % paramIndex)
			positionalArgs.append(value)
		elif token == Tokenizer.IDENTIFIER:
			keyword = value

			(token, value) = tokenizer.next()
			if token == Tokenizer.PUNCT:
				if value == ',':
					tokenizer.warning("unnamed positional parameter at position %d; ignored" % paramIndex)
					positionalArgs.append(keyword)
					continue

				if value == '=':
					literal = parseExpression(tokenizer, globalVariableDict)
					debug0("  %s = %s" % (keyword, literal))
					namedArgs[keyword] = literal
				elif value == '(':
					debug0("handling function call")
					parseArgumentList(tokenizer, globalVariableDict, literal + "  ")
				else:
					break
			else:
				break
		else:
			break

		(token, value) = tokenizer.next()
		if token == Tokenizer.PUNCT:
			if value == ')':
				# we've made it!
				return (positionalArgs, namedArgs)

			if value == ',':
				# one more
				continue

		break

	tokenizer.error("unexpected token %s" % value)

def tryParseSimpleAssignment(variableDict, line):
	try:
		tokenizer = Tokenizer(line)

		(token, value) = tokenizer.next()
		if token != Tokenizer.IDENTIFIER:
			return
		name = value

		if not tokenizer.lookahead(Tokenizer.PUNCT, "="):
			return False
		tokenizer.next() # consume
	
		rhs = parseExpression(tokenizer)
		if rhs is not None:
			log_debug("  Found global variable assignment %s=%s" % (name, rhs))
			variableDict[name] = rhs
	except:
		return

def parseSetupPy(archive, path, raw):
	global Global_PythonVersion

	log_info("Parsing %s" % (path))
	result = newMetadata()

	globalVariables = dict()

	lineno = 0
	while True:
		line = raw.readline()
		if line is None:
			break
		lineno += 1

		line = line.decode().strip()

		if not line.startswith("setup"):
			if line and line[0].isalpha():
				tryParseSimpleAssignment(globalVariables, line)
			continue

		log_verbose("Found line starting with setup")
		if line.startswith("setup("):
			line = line[5:]
		elif line.startswith("setuptools.setup("):
			line = line[16:]
		else:
			continue

		tokenizer = Tokenizer(line, raw, filename = path, lineno = lineno)

		(token, value) = tokenizer.next()
		if token != Tokenizer.PUNCT or value != '(':
			tokenizer.error("setup.py: 'setup' not followed by '('")

		log_verbose("  Parse setup arg list")
		(positionalArgs, namedArgs) = parseArgumentList(tokenizer, globalVariables)

		for keyword in namedArgs:
			metaKeywordMapping = {
				'url'		: 'home-page',
				'author_email'	: 'author-email',
				'description'	: 'summary',
				'classifiers'	: 'classifier',
			}

			literal = namedArgs[keyword]

			mapped = metaKeywordMapping.get(keyword)
			if mapped is not None:
				keyword = mapped

			if type(literal) == list:
				for item in literal:
					processPythonPackageAttr(result, keyword, item)
			elif type(literal) == dict:
				pass
			else:
				processPythonPackageAttr(result, keyword, literal)

		if not result['python-versions']:
			result['python-versions'] = sorted(Global_PythonVersion.keys())

		return result

	log_fatal("Unable to locate setup() call in %s" % path)


# Return SPDX short Identifier for license
Global_SpdxIds = {
	'MIT'			: 'MIT',
	'MITLicense'		: 'MIT',
	'ApacheLicense2.0'	: 'Apache-2.0',
	'Apache2.0'		: 'Apache-2.0',
	'ISCLicense'		: 'ISC',
	'ISClicense'		: 'ISC',
	'ISCLicense(ISCL)'	: 'ISC',
	'PythonSoftwareFoundationLicense' : 'Python-2.0',
	'PSF'			: 'Python-2.0',
}

def translateLicense(pkgName, name):
	# Some wheels refer to rather generic license names such as BSD. Help the poor struggler
	if pkgName == 'ipython':
		return "BSD-3-Clause"
	if pkgName == 'decorator':
		return "BSD-2-Clause"
	if pkgName == 'Pygments':
		return "BSD-2-Clause"

	spdxID = Global_SpdxIds.get(name.replace(' ', ''))
	if spdxID:
		return spdxID

	log_info("Unknown license string \"%s\"" % name)
	return name

def massageMetadata(pkgName, meta):
	def warnMissingAttr(attrName):
		log_warning("%s metadata lacks a %s attribute" % (pkgName, attrName))

	if meta['name'] is None:
		warnMissingAttr("Name")
		meta['name'] = pkgName
	elif meta['name'] != pkgName:
		log_warning("%s metadata specifies a conflicting package name (%s)" % (pkgName, meta['name']))
		meta['name'] = pkgName

	if meta['license'] is None:
		warnMissingAttr("License")
		meta['license'] = "Unknown"
	else:
		meta['license'] = translateLicense(pkgName, meta['license'])

	if meta['home-page'] is not None:
		meta['url'] = meta['home-page']

	if meta['summary'] is not None:
		# our rpmlint considers a summary that ends in a '.' an error.
		# would you believe it.
		meta['summary'] = meta['summary'].rstrip('.')

	pyTags = {
		'py2' : 'python2',
		'py3' : 'python3',
	}
	supportedPyTags = []
	for tag in sorted(pyTags.keys()):
		if pyTags[tag] in meta['python-versions']:
			supportedPyTags.append(tag)
	if not supportedPyTags:
		log_fatal("unable to determine list of supported py tags")
	meta['python_tags'] = ".".join(supportedPyTags)

def walkTree(root):
	import os

	# log_verbose("walkTree(%s)" % root)
	rootLen = len(root)

	result = []
	for base, dirs, files in os.walk(root):
		if base.startswith(root):
			base = base[rootLen:]
		result += ((base + "/" + name + "/") for name in dirs)
		result += ((base + "/" + name) for name in files)

	return sorted(result)

def compareTrees(tree1, tree2):
	global opt_verbose

	added = []
	removed = []

	index1 = 0
	index2 = 0
	len1 = len(tree1)
	len2 = len(tree2)

	while True:
		if index1 >= len1:
			added += tree2[index2:]
			break

		if index2 >= len2:
			removed += tree1[index1:]
			break

		name1 = tree1[index1]
		name2 = tree2[index2]

		if name1 == name2:
			index1 += 1
			index2 += 1
		elif name1 < name2:
			removed.append(name1)
			index1 += 1
		else:
			added.append(name2)
			index2 += 1

	if opt_verbose:
		if removed:
			print("Removed:");
			print("\n".join(removed))
		if added:
			print("Added:");
			print(",\n".join(added))

	return (removed, added)

def pipInstall(pipName, pythonVersion = None):
	global Global_BuildRoot

	log_info("Install wheel %s (%s)" % (pipName, pythonVersion))

	runShellCommand("rm -rf %s" % Global_BuildRoot)
	if pythonVersion is not None:
		runShellCommand("virtualenv --python %s --clear %s" % (pythonVersion, Global_BuildRoot))
	else:
		runShellCommand("virtualenv --clear %s" % Global_BuildRoot)

	treeBefore = walkTree(Global_BuildRoot)

	genericOptions = [
		"--disable-pip-version-check",
	]
	installOptions = [
		"--no-deps",
		"--only-binary :all:"
	]

	runShellCommandList((
			". %s/bin/activate" % Global_BuildRoot,
			"pip %s install %s %s" % (
				" ".join(genericOptions),
				" ".join(installOptions),
				pipName)
			))

	treeAfter = walkTree(Global_BuildRoot)

	log_info("Comparing tree contents before and adter pip install")
	(removedFiles, addedFiles) = compareTrees(treeBefore, treeAfter)

	if removedFiles:
		log_error("Installation of %s for %s removed one or more files:" % (pipName, pythonVersion))
		log_error("\n".join(removedFiles))
		log_fatal("Cannot deal with removed files")

	if not addedFiles:
		log_error("Installation of %s for %s did not install any files" % (pipName, pythonVersion))
		log_fatal("Unable to create %s package" % pythonVersion)

	ignoreFilesWithSuffix(addedFiles, ".pyc")
	ignoreFilesMatching(addedFiles, lambda name : "/__pycache__/" in name)

	# ignore the typeshed gunk in jedi and others.
	ignoreFilesMatching(addedFiles, lambda name : "/third_party/" in name)

	return addedFiles

def obsCreatePkgDirectory(pkgName):
	global Global_SrcPkgRoot, Global_PkgPrefix
	import os

	prefix = Global_PkgPrefix['source']
	if prefix:
		prefix += "-"

	if Global_SrcPkgRoot is None:
		pkgDirectory = "%s%s" % (prefix, pkgName)
	else:
		pkgDirectory = "%s/%s%s" % (Global_SrcPkgRoot, prefix, pkgName)

	if os.path.exists(pkgDirectory):
		if not os.path.isdir(pkgDirectory):
			log_fatal("%s exists, but is not a directory" % pkgDirectory)

		specfilePath = "%s/python-%s.spec" % (pkgDirectory, pkgName)
		if os.path.exists(specfilePath):
			log_warning("%s exists and seems to contain a spec file - proceed with caution" % (pkgDirectory, ))
	else:
		runShellCommand("osc mkpac %s" % pkgDirectory)
		# os.makedirs(pkgDirectory)

	log_info("OBS package will be prepared in %s" % pkgDirectory)
	return pkgDirectory

def obsCopyArchive(pkgDir, archiveName):
	runShellCommand("cp %s %s/%s" % (archiveName, pkgDir, archiveName))

def obsCreateManifest(pkgDir, pkgName, pkgVersion, files):
	global Global_InstallRoot

	manifestName = "%s.files" % pkgName
	manifestPath = "%s/%s" % (pkgDir, manifestName)

	fullpathFiles = (("/usr" + name) for name in files)

	f = open(manifestPath, 'w')
	for name in files:
		name = Global_InstallRoot + name

		if name.endswith("/"):
			f.write("%%dir %s\n" % name)
		else:
			f.write("%%attr(-,root,root) %s\n" % name)
	f.close()

	return manifestName


def obsCreateSpecfile(pkgDir, specFileName, binaryPkgName, archiveName, manifestName, pyRequires, metadata):
	global Specfile_Template
	global Global_PythonVersion
	import re, os

	skip = ""
	for pyvers in Global_PythonVersion.keys():
		if pyvers not in metadata['python-versions']:
			skip += "%%define skip_%s 1\n" % pyvers

	templatePath = searchPath("template/specfile", [".", "$HOME/lib"])
	if not templatePath:
		log_fatal("Cannot file template/specfile")

	template = open(templatePath)
	if not template:
		log_fatal("Unable to open %s" % templatePath)

	requires = []
	for req in pyRequires:
		requires.append("Requires:\t%s" % req)

	specfilePath = "%s/%s" % (pkgDir, specFileName)
	specf = open(specfilePath, "w")

	rx = re.compile("@@PIP_([^@]*)@@")
	for line in template.readlines():
		line = line.rstrip()
		if line == "@@PIP_SKIP@@":
			if skip:
				specf.write(skip + "\n")
			continue

		outline = ""
		while True:
			m = rx.search(line)
			if m is None:
				outline += line
				break

			outline += line[:m.start(0)]
			line = line[m.end(0):]

			key = m.group(1).lower()

			if key == "requires":
				value = "\n".join(requires)
			elif key == "description":
				value = metadata.get('summary')
				if not value:
					value = "Automatically repackaged %s wheel" % metadata['name']
				author = metadata.get('author')
				if author:
					value += "\n\nAuthor: " + author
					email = metadata.get('author-email')
					if email:
						value += " (" + email + ")"
			elif key == "archive_name":
				name = metadata['name']
				if archiveName is not None:
					value = archiveName
				else:
					value = name.replace("-", "_")
				if name == value:
					value = "%{pipName}"
			elif key == "name_binary":
				value = binaryPkgName
			else:
				try:
					value = metadata[key]
				except:
					log_fatal("Unable to build spec file; cannot find pkg_%s" % key)

			outline += value


		specf.write(outline + "\n")

	specf.close()

	log_info("Wrote specfile to %s" % specfilePath)
	return specfilePath

def obsCreateChangesFile(pkgDir, binaryPkgName, pkgVersion):
	import os

	changesFilePath = "%s/%s.changes" % (pkgDir, binaryPkgName)
	if not os.path.exists(changesFilePath):
		import time, os

		f = open(changesFilePath, "w")
		f.write("-" * 67 + "\n")

		user = os.getenv("USER")
		if not user:
			user = "unknown"

		timestamp = time.strftime("%a %b %2d %H:%M:%S UTC %Y", time.gmtime())

		f.write("%s - %s@suse.de\n\n" % (timestamp, user))
		f.write(" - Initial packaging (version %s)\n" % pkgVersion)
		f.close()

		log_info("Created %s" % changesFilePath)
	else:
		log_info("A .changes file for %s exists; do not forget to update as needed")

def obsBuildRequirements(pyvers, requires):
	global Global_PkgPrefix

	result = []

	prefix = Global_PkgPrefix[pyvers]
	for req in requires:
		if not req.startswith("python"):
			req = "%s-%s" % (prefix, req)
		result.append(req)

	return result

def pipFindArchive(archiveName):
	log_debug("See if there's a %s-*.whl file" % archiveName)
	l = findFiles(archiveName + "-", ".whl", caseSensitive = False)
	if not l:
		log_debug("See if there's a %s-*.tar.gz file" % archiveName)
		l = findFiles(archiveName + "-", ".tar.gz", caseSensitive = False)
	if not l:
		log_debug("No match")
		return None

	if len(l) > 1:
		log_error("Found archive files: %s" % ", ".join(l))
		log_fatal("Found more than one pip archive; don't know how to proceed")

	log_verbose("Found PIP archive %s" % l[0])
	return l[0]

def obsCreatePackage(pipName, archiveName, pipRequires):

	print("=== Creating OBS package from %s wheel ===" % pipName)
	pkgName = pipName

	pkgSpec = pipName
	if pipRequires is not None:
		pkgSpec += "(%s)" % pipRequires

	if archiveName is None:
		archiveName = pipName.replace("-", "_")

	wheelArchive = pipFindArchive(archiveName)
	if wheelArchive is None:
		log_verbose("%s: no archive file found, downloading now" % pipName)
		runShellCommand("pip download --no-deps '%s'" % pkgSpec)

		wheelArchive = pipFindArchive(archiveName)

		if wheelArchive is None:
			log_fatal("Cannot find downloaded pip archive")

	if wheelArchive.endswith(".whl"):
		wheelArchiveBase = wheelArchive[:-4]

		(whlBasename, whlVersion, whlCompatPy, whlCompatApi, whlCompatPlatform) = wheelArchiveBase.split("-")
		if whlBasename != archiveName:
			log_warning("downloaded archive name %s does not match request name %s" % (whlBasename, archiveName))

		(path_METADATA, raw) = wheelReadFile(wheelArchive, "METADATA")
		metadata = parseWheelMetadata(wheelArchive, path_METADATA, raw)
	elif wheelArchive.endswith(".tar.gz"):
		wheelArchiveBase = wheelArchive[:-7]

		(whlBasename, whlVersion) = wheelArchiveBase.rsplit("-", 1)
		if whlBasename != archiveName:
			log_warning("downloaded archive name %s does not match request name %s" % (whlBasename, archiveName))

		(path_setup, raw) = tarballReadFile(wheelArchive, "setup.py")
		metadata = parseSetupPy(wheelArchive, path_setup, raw)
	else:
		log_fatal("Don't know how to process archive %s" % wheelArchive)


	massageMetadata(pkgName, metadata)

	if not metadata['python-versions']:
		log_fatal("%s: unable to infer supported python versions from metadata" % pipName)

	log_info("%s supports %s" % (pipName, ", ".join(metadata['python-versions'])))

	pkgDir = obsCreatePkgDirectory(pkgName)

	sourcePkgName = "python-%s" % (pkgName, )
	specfileName = "%s.spec" % sourcePkgName
	specFilePath = obsCreateSpecfile(pkgDir, specfileName, sourcePkgName,
		       archiveName, None,
		       metadata['requires'], # obsBuildRequirements(pyvers, metadata['requires']),
		       metadata)

	obsCopyArchive(pkgDir, wheelArchive)

	runShellCommand("cd %s && test -f *.changes || osc vc -m\"Initial build of version %s\"" % (pkgDir, metadata['version']))
	runShellCommand("cd %s && osc ar" % pkgDir)

	log_info("Done.")

def main():
	import sys, getopt
	global opt_verbose
	global Global_BuildRoot

	try:
		opts, args = getopt.getopt(sys.argv[1:], "A:hR:v", ["archive-name=", "help", "verbose", "require="])
	except getopt.GetoptError as err:
		# print help information and exit:
		print (str(err))
		usage()
		sys.exit(2)

	opt_require = None
	opt_archive = None
	for o, a in opts:
		if o in ("-h", "--help"):
			usage()
			sys.exit()
		if o in ("-v", "--verbose"):
			opt_verbose += 1
		if o in ("-R", "--require"):
			opt_require = a
		if o in ("-A", "--archive-name"):
			opt_archive = a

	Global_BuildRoot = shellExpansion(Global_BuildRoot)
	log_verbose("Build root is %s" % Global_BuildRoot)

	for name in args:
		obsCreatePackage(name, opt_archive, opt_require)


if __name__ == "__main__":
	main()
